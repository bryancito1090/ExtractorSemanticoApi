// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ExtractorSemanticoApi.Dominio;

public partial class ExtractorsemanticoContext : DbContext
{
    public ExtractorsemanticoContext(DbContextOptions<ExtractorsemanticoContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ExtractedDatum> ExtractedData { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<RdfTriple> RdfTriples { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Sentiment> Sentiments { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<ExtractedDatum>(entity =>
        {
            entity.HasKey(e => e.DataId).HasName("PRIMARY");

            entity.ToTable("extracted_data");

            entity.HasIndex(e => e.ReviewId, "review_id");

            entity.Property(e => e.DataId).HasColumnName("data_id");
            entity.Property(e => e.Metadata)
                .HasColumnType("json")
                .HasColumnName("metadata");
            entity.Property(e => e.ReviewId).HasColumnName("review_id");
            entity.Property(e => e.Subtype)
                .HasMaxLength(50)
                .HasColumnName("subtype");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasColumnType("enum('ENTITY','EVENT','RELATION')")
                .HasColumnName("type");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("value");

            entity.HasOne(d => d.Review).WithMany(p => p.ExtractedData)
                .HasForeignKey(d => d.ReviewId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("extracted_data_ibfk_1");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PRIMARY");

            entity.ToTable("products");

            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Brand)
                .HasMaxLength(100)
                .HasColumnName("brand");
            entity.Property(e => e.Category)
                .HasMaxLength(100)
                .HasColumnName("category");
            entity.Property(e => e.Model)
                .HasMaxLength(100)
                .HasColumnName("model");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<RdfTriple>(entity =>
        {
            entity.HasKey(e => e.TripleId).HasName("PRIMARY");

            entity.ToTable("rdf_triples");

            entity.HasIndex(e => e.SourceReviewId, "source_review_id");

            entity.Property(e => e.TripleId).HasColumnName("triple_id");
            entity.Property(e => e.Object)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("object");
            entity.Property(e => e.Predicate)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("predicate");
            entity.Property(e => e.SourceReviewId).HasColumnName("source_review_id");
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("subject");

            entity.HasOne(d => d.SourceReview).WithMany(p => p.RdfTriples)
                .HasForeignKey(d => d.SourceReviewId)
                .HasConstraintName("rdf_triples_ibfk_1");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewId).HasName("PRIMARY");

            entity.ToTable("reviews");

            entity.HasIndex(e => e.ProductId, "product_id");

            entity.Property(e => e.ReviewId).HasColumnName("review_id");
            entity.Property(e => e.CleanText)
                .HasColumnType("text")
                .HasColumnName("clean_text");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .HasColumnName("location");
            entity.Property(e => e.OriginalText)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("original_text");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.ReviewDate).HasColumnName("review_date");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("user_name");

            entity.HasOne(d => d.Product).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("reviews_ibfk_1");
        });

        modelBuilder.Entity<Sentiment>(entity =>
        {
            entity.HasKey(e => e.SentimentId).HasName("PRIMARY");

            entity.ToTable("sentiments");

            entity.HasIndex(e => e.ReviewId, "review_id");

            entity.Property(e => e.SentimentId).HasColumnName("sentiment_id");
            entity.Property(e => e.Aspect)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("aspect");
            entity.Property(e => e.Confidence).HasColumnName("confidence");
            entity.Property(e => e.ReviewId).HasColumnName("review_id");
            entity.Property(e => e.SentimentType)
                .IsRequired()
                .HasColumnType("enum('POSITIVO','NEUTRAL','NEGATIVO')")
                .HasColumnName("sentiment");

            entity.HasOne(d => d.Review).WithMany(p => p.Sentiments)
                .HasForeignKey(d => d.ReviewId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sentiments_ibfk_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}